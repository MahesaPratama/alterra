// Mocks generated by Mockito 5.4.0 from annotations
// in mobile_flutter/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mobile_flutter/domain/entities/membership.dart' as _i11;
import 'package:mobile_flutter/domain/entities/product.dart' as _i17;
import 'package:mobile_flutter/domain/entities/product_category.dart' as _i19;
import 'package:mobile_flutter/domain/entities/sales_report.dart' as _i21;
import 'package:mobile_flutter/domain/entities/user_checkout.dart' as _i7;
import 'package:mobile_flutter/domain/entities/user_login.dart' as _i9;
import 'package:mobile_flutter/domain/repositories/repository.dart' as _i2;
import 'package:mobile_flutter/domain/usecases/get_product_by_category.dart'
    as _i16;
import 'package:mobile_flutter/domain/usecases/get_product_category.dart'
    as _i18;
import 'package:mobile_flutter/domain/usecases/get_sales_report.dart' as _i20;
import 'package:mobile_flutter/domain/usecases/get_status_onboarding.dart'
    as _i14;
import 'package:mobile_flutter/domain/usecases/get_user_local.dart' as _i12;
import 'package:mobile_flutter/domain/usecases/get_user_token.dart' as _i22;
import 'package:mobile_flutter/domain/usecases/post_checkout_product.dart'
    as _i4;
import 'package:mobile_flutter/domain/usecases/post_login.dart' as _i8;
import 'package:mobile_flutter/domain/usecases/post_logout.dart' as _i13;
import 'package:mobile_flutter/domain/usecases/post_membership.dart' as _i10;
import 'package:mobile_flutter/domain/usecases/set_status_onboarding.dart'
    as _i15;
import 'package:mobile_flutter/utils/error/failure.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRepository_0 extends _i1.SmartFake implements _i2.Repository {
  _FakeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostCheckoutProduct].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostCheckoutProduct extends _i1.Mock
    implements _i4.PostCheckoutProduct {
  MockPostCheckoutProduct() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> execute({
    required String? token,
    required _i7.UserCheckout? userCheckout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #token: token,
            #userCheckout: userCheckout,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #token: token,
              #userCheckout: userCheckout,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
}

/// A class which mocks [PostLogin].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostLogin extends _i1.Mock implements _i8.PostLogin {
  MockPostLogin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> execute(
          {required _i9.UserLogin? userLogin}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#userLogin: userLogin},
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #execute,
            [],
            {#userLogin: userLogin},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
}

/// A class which mocks [PostMembership].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostMembership extends _i1.Mock implements _i10.PostMembership {
  MockPostMembership() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> execute({
    required String? token,
    required _i11.Membership? membership,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #token: token,
            #membership: membership,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #token: token,
              #membership: membership,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
}

/// A class which mocks [GetUserLocal].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserLocal extends _i1.Mock implements _i12.GetUserLocal {
  MockGetUserLocal() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i9.UserLogin>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i9.UserLogin>>.value(
            _FakeEither_1<_i6.Failure, _i9.UserLogin>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i9.UserLogin>>);
}

/// A class which mocks [PostLogout].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostLogout extends _i1.Mock implements _i13.PostLogout {
  MockPostLogout() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<bool> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [GetStatusOnboarding].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetStatusOnboarding extends _i1.Mock
    implements _i14.GetStatusOnboarding {
  MockGetStatusOnboarding() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<bool> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [SetStatusOnboarding].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetStatusOnboarding extends _i1.Mock
    implements _i15.SetStatusOnboarding {
  MockSetStatusOnboarding() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<bool> execute(bool? status) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [status],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [GetProductByCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductByCategory extends _i1.Mock
    implements _i16.GetProductByCategory {
  MockGetProductByCategory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i17.Product>>> execute({
    required String? token,
    required String? query,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #token: token,
            #query: query,
          },
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i17.Product>>>.value(
                _FakeEither_1<_i6.Failure, List<_i17.Product>>(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #token: token,
              #query: query,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i17.Product>>>);
}

/// A class which mocks [GetProductCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductCategory extends _i1.Mock
    implements _i18.GetProductCategory {
  MockGetProductCategory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i19.ProductCategory>>> execute(
          {required String? token}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#token: token},
        ),
        returnValue: _i5.Future<
                _i3.Either<_i6.Failure, List<_i19.ProductCategory>>>.value(
            _FakeEither_1<_i6.Failure, List<_i19.ProductCategory>>(
          this,
          Invocation.method(
            #execute,
            [],
            {#token: token},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i19.ProductCategory>>>);
}

/// A class which mocks [GetSalesReport].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSalesReport extends _i1.Mock implements _i20.GetSalesReport {
  MockGetSalesReport() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i21.SalesReport>> execute(
          {required String? query}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#query: query},
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i21.SalesReport>>.value(
                _FakeEither_1<_i6.Failure, _i21.SalesReport>(
          this,
          Invocation.method(
            #execute,
            [],
            {#query: query},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i21.SalesReport>>);
}

/// A class which mocks [GetUserToken].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserToken extends _i1.Mock implements _i22.GetUserToken {
  MockGetUserToken() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Repository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i2.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> getStatusOnboarding() => (super.noSuchMethod(
        Invocation.method(
          #getStatusOnboarding,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> setStatusOnboarding(bool? status) => (super.noSuchMethod(
        Invocation.method(
          #setStatusOnboarding,
          [status],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i21.SalesReport>> getSalesReport(
          {required String? query}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSalesReport,
          [],
          {#query: query},
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i21.SalesReport>>.value(
                _FakeEither_1<_i6.Failure, _i21.SalesReport>(
          this,
          Invocation.method(
            #getSalesReport,
            [],
            {#query: query},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i21.SalesReport>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> postLogin(
          {required _i9.UserLogin? userLogin}) =>
      (super.noSuchMethod(
        Invocation.method(
          #postLogin,
          [],
          {#userLogin: userLogin},
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #postLogin,
            [],
            {#userLogin: userLogin},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
  @override
  _i5.Future<bool> postLogout() => (super.noSuchMethod(
        Invocation.method(
          #postLogout,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i9.UserLogin>> getUserLocal() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserLocal,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i9.UserLogin>>.value(
            _FakeEither_1<_i6.Failure, _i9.UserLogin>(
          this,
          Invocation.method(
            #getUserLocal,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i9.UserLogin>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> getUserToken() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserToken,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #getUserToken,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i19.ProductCategory>>>
      getProductCategory({required String? token}) => (super.noSuchMethod(
            Invocation.method(
              #getProductCategory,
              [],
              {#token: token},
            ),
            returnValue: _i5.Future<
                    _i3.Either<_i6.Failure, List<_i19.ProductCategory>>>.value(
                _FakeEither_1<_i6.Failure, List<_i19.ProductCategory>>(
              this,
              Invocation.method(
                #getProductCategory,
                [],
                {#token: token},
              ),
            )),
          ) as _i5.Future<_i3.Either<_i6.Failure, List<_i19.ProductCategory>>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i17.Product>>> getProductByCategory({
    required String? token,
    required String? categoryName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductByCategory,
          [],
          {
            #token: token,
            #categoryName: categoryName,
          },
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i17.Product>>>.value(
                _FakeEither_1<_i6.Failure, List<_i17.Product>>(
          this,
          Invocation.method(
            #getProductByCategory,
            [],
            {
              #token: token,
              #categoryName: categoryName,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i17.Product>>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> postMembership({
    required String? token,
    required _i11.Membership? membership,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postMembership,
          [],
          {
            #token: token,
            #membership: membership,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #postMembership,
            [],
            {
              #token: token,
              #membership: membership,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> postCheckout({
    required String? token,
    required _i7.UserCheckout? userCheckout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postCheckout,
          [],
          {
            #token: token,
            #userCheckout: userCheckout,
          },
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #postCheckout,
            [],
            {
              #token: token,
              #userCheckout: userCheckout,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
}
